name: CI

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0,3'
  workflow_dispatch:

jobs:
  formatting:
    runs-on: ubuntu-latest
    outputs:
      new_commit: ${{ steps.commit.outputs.pushed }}
    steps:
    - name: Checkout github repo
      if: github.event_name != 'pull_request'
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PUSH_FORMATTER_TOKEN }}
    - name: Checkout github repo
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v2
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.PUSH_FORMATTER_TOKEN }}
    - name: Check python files using the black formatter
      uses: rickstaa/action-black@v1
      id: action_black
      with:
        black_args: "."
    - name: Check c++ files using the clang formatter
      uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        extensions: 'h,cpp,c'
        clangFormatVersion: 14
        inplace: True
    - name: Commit
      id: commit
      uses: EndBug/add-and-commit@v9
      with:
        author_name: Formatting Robot
        author_email: robot@example.com
        message: 'Python and c++ formatting'
      env:
        GITHUB_TOKEN: ${{ secrets.PUSH_FORMATTER_TOKEN }}
    - name: Save output
      id: add_commit
      run: |
        echo "::set-output name=commit::${{steps.commit.outputs.pushed}}"

  build_wheel:
    runs-on: ${{ matrix.os }}
    needs: [formatting]
    if: needs.formatting.outputs.new_commit == 'false'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]

    env:
      GEANT4_VERSION: 'v11.0.2'
      ITK_VERSION: 'v5.1.0'

    steps:
    - name: Checkout github repo
      uses: actions/checkout@v2
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - uses: kenchan0130/actions-system-info@master
      id: system-info
    - name: Cache modules
      id: cache_opengate_core_dependencies
      uses: actions/cache@v2
      with:
        path: ~/software
        key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}_geant4_${{ env.GEANT4_VERSION }}_itk_${{ env.ITK_VERSION }}_build1
        restore-keys: ${{ runner.os }}-${{ steps.system-info.outputs.release }}_geant4_${{ env.GEANT4_VERSION }}_itk_${{ env.ITK_VERSION }}_build1
    - name: Create opengate Wheel
      if: matrix.os == 'ubuntu-latest'
      run: |
          if [ ${{ matrix.python-version }} == "3.9" ]; then
              rm -rf $GITHUB_WORKSPACE/opengate/tests/data
              cp $GITHUB_WORKSPACE/.git/modules/gam-tests/data/HEAD $GITHUB_WORKSPACE/opengate/tests/
              pip install wheel
              python setup.py sdist bdist_wheel
              mv dist dist_opengate
          fi
    - name: Create opengate_core Wheel Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
          if  [ ${{ matrix.python-version }} == "3.5" ]; then
            export PYTHONFOLDER="cp35-cp35m"
          elif [ ${{ matrix.python-version }} == "3.6" ]; then
            export PYTHONFOLDER="cp36-cp36m"
          elif [ ${{ matrix.python-version }} == "3.7" ]; then
            export PYTHONFOLDER="cp37-cp37m"
          elif [ ${{ matrix.python-version }} == "3.8" ]; then
            export PYTHONFOLDER="cp38-cp38"
          elif [ ${{ matrix.python-version }} == "3.9" ]; then
            export PYTHONFOLDER="cp39-cp39"
          fi
          mkdir -p $HOME/software
          docker run --rm -e "PYTHONFOLDER=${PYTHONFOLDER}" -v $GITHUB_WORKSPACE:/home tbaudier/opengate_core:${{ env.GEANT4_VERSION }} /home/.github/workflows/createWheelLinux.sh
          ls wheelhouse
          rm -rf dist
          mv wheelhouse dist
          sudo chown -R runner:docker dist
          if [ ${{ matrix.python-version }} == "3.9" ]; then
              ls -lrt .
              ls -lrt dist/
              ls -lrt dist_opengate/
              mv dist_opengate/* dist/
          fi
    - uses: conda-incubator/setup-miniconda@v2
      if: matrix.os == 'macos-latest'
      with:
          auto-update-conda: true
          activate-environment: opengate_core
          python-version: ${{ matrix.python-version }}
    - name: Create opengate_core Wheel Mac
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |     
          brew update
          brew install --force --verbose \
                       ccache \
                       fftw \
                       llvm \
                       libomp \
                       xquartz \
                       wget
          export LDFLAGS="-L/usr/local/opt/llvm/lib"
          export CPPFLAGS="-I/usr/local/opt/llvm/include -fopenmp"
          conda info
          conda list
          which python
          python --version
          export PATH="/usr/local/miniconda/envs/opengate_core/bin/:$PATH"
          pip install wheel delocate==0.8.2 wget colored
          conda install -c anaconda qt
          mkdir -p $HOME/software
          if [ "${{ steps.cache_opengate_core_dependencies.outputs.cache-hit }}" != 'true' ]; then
              cd $HOME/software
              mkdir geant4
              cd geant4
              mkdir src bin data
              git clone --branch $GEANT4_VERSION https://github.com/Geant4/geant4.git --depth 1 src
              cd bin
              cmake -DCMAKE_CXX_FLAGS=-std=c++17 \
                    -DGEANT4_INSTALL_DATA=ON \
                    -DGEANT4_INSTALL_DATADIR=$HOME/software/geant4/data \
                    -DGEANT4_USE_QT=ON \
                    -DGEANT4_USE_OPENGL_X11=ON \
                    -DGEANT4_BUILD_MULTITHREADED=ON \
                    ../src
              make -j4
              cd $HOME/software
              mkdir itk
              cd itk
              mkdir src bin
              git clone --branch $ITK_VERSION https://github.com/InsightSoftwareConsortium/ITK.git --depth 1 src
              cd bin
              cmake -DCMAKE_CXX_FLAGS=-std=c++17 \
                    -DBUILD_TESTING=OFF \
                    -DITK_USE_FFTWD=ON \
                    -DITK_USE_FFTWF=ON \
                    -DITK_USE_SYSTEM_FFTW:BOOL=ON \
                    ../src
              make -j4
          fi
          cd $GITHUB_WORKSPACE
          ls /usr/local/miniconda/envs/opengate_core/plugins/platforms
          source $HOME/software/geant4/bin/geant4make.sh
          export CMAKE_PREFIX_PATH=$HOME/software/geant4/bin:$HOME/software/itk/bin/:${CMAKE_PREFIX_PATH}
          cd core
          mkdir opengate_core/plugins
          cp -r /usr/local/miniconda/envs/opengate_core/plugins/platforms opengate_core/plugins/
          cp -r /usr/local/miniconda/envs/opengate_core/plugins/imageformats opengate_core/plugins/
          mkdir opengate_core/plugins/miniconda
          cp /usr/local/miniconda/envs/opengate_core/lib/libQt5Svg.5.9.7.dylib opengate_core/plugins/miniconda/
          ls -a
          python3 ../.github/workflows/redoQt5LibsMac.py
          python3 setup.py sdist bdist_wheel
          ls dist
          export DYLD_LIBRARY_PATH=$HOME/software/geant4/bin/BuildProducts/lib:/usr/local/miniconda/envs/opengate_core/plugins/platforms:/opt/X11/lib/:$DYLD_LIBRARY_PATH:/usr/local/miniconda/envs/opengate_core/lib
          delocate-listdeps --all dist/*.whl
          delocate-wheel -w fixed_wheels -v dist/*.whl
          rm -rf dist
          ls fixed_wheels
          delocate-listdeps --all fixed_wheels/*.whl
          mv fixed_wheels dist
          cd dist
          find . -name '*whl' -exec bash -c ' mv $0 ${0/macosx_11_0/macosx_10_9}' {} \;
          cd ../..
          mv core/dist .
    - name: Upload wheels
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist/

  publish_wheel:
    runs-on: ubuntu-latest
    needs: [build_wheel]
    steps:
    - name: Checkout github repo
      uses: actions/checkout@v2
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - uses: actions/download-artifact@v1
      with:
        name: dist
        path: dist/
    - name: Separate the wheels
      run: |
          mkdir dist_opengate_core dist_opengate
          mv dist/opengate_core-* dist_opengate_core/
          mv dist/opengate-* dist_opengate/
    - name: Publish to PyPI opengate_core
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_OPENGATE_CORE }}
        packages_dir: dist_opengate_core/
        skip_existing: true
    - name: Publish to PyPI opengate
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_OPENGATE }}
        packages_dir: dist_opengate/
        skip_existing: true

  test_wheel:
    runs-on: ${{ matrix.os }}
    needs: [build_wheel]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: dist
        path: dist/
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Run tests
      run: |
          if  [ ${{ matrix.python-version }} == "3.5" ]; then
            export PYTHONFOLDER="cp35-cp35m"
          elif [ ${{ matrix.python-version }} == "3.6" ]; then
            export PYTHONFOLDER="cp36-cp36m"
          elif [ ${{ matrix.python-version }} == "3.7" ]; then
            export PYTHONFOLDER="cp37-cp37m"
          elif [ ${{ matrix.python-version }} == "3.8" ]; then
            export PYTHONFOLDER="cp38-cp38"
          elif [ ${{ matrix.python-version }} == "3.9" ]; then
            export PYTHONFOLDER="cp39-cp39"
          fi
          if  [ ${{ matrix.os }} == "ubuntu-latest" ]; then
            export OSNAME="manylinux"
            pip install torch --extra-index-url https://download.pytorch.org/whl/cpu
          elif [ ${{ matrix.os }} == "macos-latest" ]; then
            export OSNAME="macosx"
            pip install torch
          fi
          pip install gaga_phsp
          pip install garf
          pip install dist/opengate_core-*-${PYTHONFOLDER}-${OSNAME}*_x86_64.whl
          pip install dist/opengate-*.whl
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
              path=`opengate_tests_utils -p site_packages`
              export LD_LIBRARY_PATH="${path}/opengate_core.libs":${LD_LIBRARY_PATH}
              path=`opengate_tests_utils -p libG4processes`
              export LD_PRELOAD=${path}:${LD_PRELOAD}
              path=`opengate_tests_utils -p libG4geometry`
              export LD_PRELOAD=${path}:${LD_PRELOAD}
          fi
          OutputTest=$(opengate_tests)
          echo "$OutputTest"
          OutputTest=$(echo "$OutputTest" | tail -1)
          if [ "$OutputTest" != "True" ]; then
              exit -1
          else
              exit 0
          fi

